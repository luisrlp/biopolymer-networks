import os
import subprocess
import numpy as np
import glob
from itertools import product

'''SCRIPT FOR PARAMETRIC STUDIES'''
# Runs a simulation in Abaqus for each property configuration
# 

# Base Material Properties
base_mat_props = {'density':5.0e-4,
                  'K': 1000000000.0,
                  'C10': 0.0, 'C01': 0.0, 'PHI': 1.0,
                  'L': 1.96, 'R0F': 1.63, 'R0C': 0.014, 
                  'ETA': 0.6666, 'MU0': 10.0e8, 'BETA': 0.5, 'B0': 294.0*16.0*1.38065e-5, 'LAMBDA0': 1.0,
                  'NA': 7.66, 'BDISP': 0.001}

def delete_old_files(job_name):
    # Delete old files generated by Abaqus
    file_extensions = ['.com', '.dat', '.msg', '.prt', '.sim', '.sta', '.odb']
    for ext in file_extensions:
        files = glob.glob(f'{job_name}*{ext}')
        for file in files:
            try:
                os.remove(file)
            except OSError as e:
                print(f"Error deleting file {file}: {e}")

def create_material_file(output_file, parameters):
    with open(output_file, 'w') as file:
        file.write("*parameter\n")
        for key in parameters:
            value = parameters[key]
            file.write(f"{key} = {value}\n")

def run_abaqus_sim():
    # Run a simulation in Abaqus
    subprocess.run(['abaqus', 'job=cube_anl.inp', 'user=umat_anl_ai.f', '-interactive'], check=True)

def extract_results():
    # Extract output (to numpy array)
    subprocess.run(['abaqus', 'cae', '-noGUI', 'getoutput.py'], check = True)

# Parameters studied
study_params = {
    'ETA': [0.3333, 0.6666, 1.0]
}

aux_list = []
for value in study_params:
    aux_list.append(study_params[value])
cross_props = list(product(*aux_list))
mat_props = base_mat_props.copy()

for c, config in enumerate(cross_props):
    for k, key in enumerate(study_params):
        mat_props[key] = config[k]
    create_material_file(f'material_param.inp', mat_props)
    delete_old_files('cube_anl')
    run_abaqus_sim()
    extract_results()
    output = np.load('output.npy')
    np.save(f'np_outputs/output_{c}.npy', output)